// Промис (это объект) - это обещание предоставить результат позже (после обработки)
// или вернуть ошибку, если результат предоставить невозможно
// состояния промиса:   ожидание,  исполнен,  отклонён


// Промис создается как экземпляр дефолтного класса(объекта) Promise
              //  new - вызывается конструктор, в который мы передаём
              //  колбэк функцию с двумя параметрами
const myPromise = new Promise((resolve, reject) => {
    // выполнение асинхронных действий
    // Промис в состоянии pending (ожидание)
    // внутри этой функции нужно в результате вызвать
    // одну из функций: resolve или reject
})

// получение и использование результата Промиса:  
// myPromise.then().catch()
myPromise
    .then(value => {
        // действия в случае успешного исполнения Промиса
        // значение value - это значение, переданное в вызове функции resolve внутри Промиса
    })
    .catch (error => {
        // действия в случае отклонения Промиса
        // значение error - это значение, переданное в вызове функции reject внутри Промиса
    })


// fetch запрос (создаётся Промис (в состоянии pending))
fetch('https://jsonplaceholder.typicode.com/todos') // метод fetch возвращает Промис
    .then(response => response.json())  // метод json также возвращает Промис
    .then(json => console.log(json))
    .then(error => console.error(error)) // если один из промисов вернул ошибку