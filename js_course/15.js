// ОБЛАСТИ ВИДИМОСТИ 
// цепочка областей видимости: 
// переменная сначала ищется внутри области видимости функции,
// если не находится - то ищется в глобальной области видимости 
// переменная ищется в глобальной области видимости, т.к. вызов самой функции происходит в глобальной области видимости

const a = 5;

function myFn() {
    function innerFn() {
        console.log(a)
    }
    innerFn()
}

myFn()


let c                   // сейчас undefined, значение будет присвоено в результате выполнения функции
let b                  // это первая переменная с названием 'b'  сейчас undefined

function myFn2() {
    let b              // это совсем другая переменная 'b' (существует только внутри функции что let что const) 
    c = true          //  'c' не существует внутри функции, но существует в глобальной области видимости - присваиваем значение глобальной переменной 'c' (это плохой код)
    b = 20             // присваиваем другой 'b' значение
    console.log(b)    // выведет в консоль значение другой 'b' в момент вызова функции
}                     // в браузере функция вернёт undefined т.к. не слова return

myFn2()          // вызов функции из глобальной области видимости
                 // но со своей областью видимости внутри (каждый раз новая область видимости)

console.log(b)  // в этот момент вызывается глобалная 'b', Локальная 'b' к этому моменту уже удалилась
console.log(c)